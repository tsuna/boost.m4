# Copyright (C) 2007, 2011  Benoit Sigoure <tsuna@lrde.epita.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Most of the macros were shamelessly stolen from autoconf's own testsuite.
# Version used to steal the macros: d99296e

# If you want to add a test, look near the end of this file.

## ---------------- ##
## Utility macros.  ##
## ---------------- ##

# AT_CMP(FILE-1, FILE-2)
# ----------------------
# Check FILE-1 and FILE-2 for equality, like `cmp FILE-1 FILE-2'.
m4_define([AT_CMP],
[m4_ifval([$2],, [m4_fatal([AT_CMP takes two arguments.])])[]dnl
AT_CHECK([$at_diff "$1" "$2"])
])# AT_CMP


## ----------------------- ##
## Testing with Autoconf.  ##
## ----------------------- ##


# AT_CHECK_M4(COMMAND, [EXIT-STATUS = 0], STDOUT, STDERR)
# -------------------------------------------------------
# If stderr is specified, normalize the observed stderr.
# This (using GNU M4 1.4.6)
#
#  /usr/local/bin/m4:script.4s:1: cannot open `foo': No such file or directory
#  autom4te: /usr/local/bin/m4 failed with exit status: 1
#
# or this (GNU M4 1.4.11)
#
#  /usr/local/bin/m4:script.4s:1: include: cannot open `foo': No such file or directory
#  autom4te: /usr/local/bin/m4 failed with exit status: 1
#
# or this (GNU M4 1.4 installed as gm4)
#
#  script.4s:1: /usr/local/bin/gm4: Cannot open foo: No such file or directory
#  autom4te: /usr/local/bin/gm4 failed with exit status: 1
#
# becomes
#
#  m4:script.4s:1: cannot open `foo': No such file or directory
#  autom4te: m4 failed with exit status: 1
#
# We use the following sed patterns:
#
#     (m4): ?(file): ?(line):
# or  (file): ?(line): ?(m4):
# to  m4:(file):(line):
#
# and
#     m4:(file):(line): Cannot open foo:
# or  m4:(file):(line): include: cannot open `foo':
# to  m4:(file):(line): cannot open `foo':
#
# and
#     autom4te: [^ ]m4
# or  autom4te: [^ ]m4.exe
# to  autom4te: m4
#
# Moreover, DJGPP error messages include the error code in brackets;
# remove the error code during normalization.
#
m4_define([AT_CHECK_M4],
[AT_CHECK([$1], [$2], [$3],
          m4_case([$4], [], [], [ignore], [ignore], [stderr]))
m4_case([$4], [], [], [ignore], [],
[AT_CHECK([[sed 's/^[^:]*m4[.ex]*: *\([^:]*:\) *\([0-9][0-9]*: \)/m4:\1\2/
	s/^\([^:]*:\) *\([0-9][0-9]*:\)[^:]*m4[.ex]*: /m4:\1\2 /
	s/: C\(annot open \)\([^`:]*\):/: c\1`\2'\'':/
	s/: include:\( cannot open\)/:\1/
	s/^autom4te: [^ ]*m4[.ex]* /autom4te: m4 /
	s/ (E[A-Z]*)$//
    ' stderr >&2]], [0], [], [$4])])
])

# AT_CONFIGURE_AC(BODY)
# ---------------------
# Create a full configure.ac running BODY,
# AC_OUTPUT, and environment checking hooks.
m4_define([AT_CONFIGURE_AC],
[AT_DATA([aclocal.m4], [])
# FIXME: kludge so that we can find the macros we're testing (I can't think of
# anything better) and to get the definitions require to use Libtool without
# all the hassle of running libtoolize (which complain because there is a
# variable in AC@&t@_CONFIG_AUX_DIR).
sed '/m4@&t@_include/d' "$abs_top_srcdir/aclocal.m4" >>aclocal.m4
for i in "$abs_top_srcdir"/build-aux/*.m4; do
  echo "m4@&t@_include([[$i]])" >>aclocal.m4
done

AT_DATA([configure.ac],
[[AC_INIT
AC_CONFIG_AUX_DIR([$top_srcdir/build-aux])]
LT_INIT
AC_PROG_CXX
$1
[AC_OUTPUT
]])
])# AT_CONFIGURE_AC


# AT_CHECK_AUTOCONF(ARGS, [EXIT-STATUS = 0], STDOUT, STDERR)
# ----------------------------------------------------------
# We always use "--force", to prevent problems with timestamps if the testsuite
# were running too fast.
m4_define([AT_CHECK_AUTOCONF],
[AT_CHECK_M4([autoconf --force $1], [$2], [$3], [$4])
])


# AT_CHECK_CONFIGURE(END-COMMAND,
#                    [EXIT-STATUS = 0],
#                    [STDOUT = IGNORE], STDERR)
# --------------------------------------------
# `abs_top_srcdir' is needed so that `./configure' finds install-sh.
# Using --srcdir is more expensive.
m4_define([AT_CHECK_CONFIGURE],
[AT_CAPTURE_FILE([config.log])[]dnl
 AT_CHECK([top_srcdir=$abs_top_srcdir \
           ./configure --host=$host_alias --build=$build_alias \
           $CONFIGURE_FLAGS "CXX=$CXX" "LD=$LD" $1],
	  [$2],
	  m4_default([$3], [ignore]), [$4])])


# AT_CONFIG_CMP(VAR-FILE-A, VAR-FILE-B)
# -------------------------------------
# Check the outcomes of two configure runs for equality by comparing dumps of
# their shell variables.  VAR-FILE-A and VAR-FILE-B are two `set'-style shell
# variable space dumps.
#
# We permit variance between runs in the following shell variables:
# - ^as_
#   M4sh's shell name space.
# - ^ac_, excluding ^ac_cv_
#   Autoconf's private shell name space.
# - PPID [bash, zsh]
# - RANDOM [zsh]
# - SECONDS [zsh]
# - '$' [zsh]
# - argv [zsh]
# - ARGC [zsh]
#
# Furthermore, it is okay for a non-cache variable initialized to empty in one
# run to be unset in another run.  This happens when, for example, cache update
# code tries a number of values in LIBS and eventually restores LIBS to its
# original value. If LIBS was previously unset, it will have become set and
# empty.  (OTOH, cache variables indicate the result of the test even if they
# are empty, so we have to be strict about them.)
#
# Lines that do not look like `foo=bar' are probably latter lines of
# multiline values; trim them.
#
m4_define([AT_CONFIG_CMP],
[for act_file in $1 $2
do
  $SED '/^ac_cv_/ b
	/^m4_defn([m4_re_word])=./ !d
	/^[[^=]]*='\'''\''$/ d
	/^a[[cs]]_/ d
	/^PPID=/ d
	/^RANDOM=/ d
	/^SECONDS=/ d
	/'\'\\\$\''=/ d
	/^argv=/ d
	/^ARGC=/ d
	' $act_file >at_config_vars-$act_file
done
AT_CMP([at_config_vars-$1], [at_config_vars-$2])[]dnl
])# AT_CONFIG_CMP

# AT_CHECK_MACRO(MACRO, [KEYWORDS], [MACRO-USE], [ADDITIONAL-CMDS],
#                [AUTOCONF-FLAGS = -W obsolete])
# -----------------------------------------------------------------
# Create a minimalist configure.ac running the macro named
# NAME-OF-THE-MACRO, check that autoconf runs on that script,
# and that the shell runs correctly the configure.
#
# We run `configure' twice, both times with a cache, and compare
# the environment after each run to detect inconsistencies.
#
# New macros are not expected to depend upon obsolete macros.
#
# KEYWORDS is a space-separated list of keywords for autotest.
m4_define([AT_CHECK_MACRO],
[AT_SETUP([$1])
m4_if([$2], [], [], [AT_KEYWORDS([$2])])
AT_CONFIGURE_AC([m4_default([$3], [$1])])

dnl FIXME: We should use:
dnl   AT_CHECK_AUTOCONF([m4_default([$4], [-W obsolete])])
dnl But because Libtool uses obsolete Autoconf macros, it generates lots of
dnl spurious warnings.
AT_CHECK_AUTOCONF([m4_default([$5], [])])

for at_run in r1 r2
do
    # Capture the stderr output of configure ...
    AT_CHECK_CONFIGURE([-C], [0], [ignore], [stderr])
    # ... and discard the spurious error messages related to conftest.dSYM
    # that may be printed on OSX when using an old version of autoconf.
    dnl AT_CHECK([[sed -e '/conftest\.dSYM/d' stderr]])
    cp -f state-env.after state-env.$at_run
    dnl cp -f config.h config-h.$at_run
    dnl AT_CHECK_ENV
done

AT_CONFIG_CMP([state-env.r1], [state-env.r2])

$4

AT_CLEANUP[]dnl
])# AT_CHECK_MACRO


# AT_CHECK_MACRO_CROSS(MACRO, [KEYWORDS], [MACRO-USE], [ADDITIONAL-CMDS],
#                      [AUTOCONF-FLAGS = -W obsolete])
# -----------------------------------------------------------------------
# Like the previous one, but creates two checks: for native
# compile and for cross-compile.
m4_define([AT_CHECK_MACRO_CROSS],
[AT_CHECK_MACRO($@)
AT_CHECK_MACRO([$1 (cross compile)], [$2],
  [AT_KEYWORDS([cross])
  # Exercise the code used when cross-compiling.
  cross_compiling=yes
  ac_tool_warned=yes
  m4_default([$3], [$1])],
  [$4], [$5])
])

## ----------------------- ##
## Launch the test suite.  ##
## ----------------------- ##

AT_INIT
AT_COPYRIGHT(
[Copyright (C) 2007  Benoit Sigoure <tsuna@lrde.epita.fr>
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.])

AT_BANNER([Boost headers])

AT_CHECK_MACRO([BOOST_REQUIRE], [core])
AT_CHECK_MACRO([BOOST_REQUIRE 0.0], [core], [BOOST_REQUIRE([0.0])])
AT_CHECK_MACRO_CROSS([BOOST_REQUIRE 1.0], [core], [BOOST_REQUIRE([1.0])])
AT_CHECK_MACRO([BOOST_REQUIRE 1.1.1], [core], [BOOST_REQUIRE([1.1.1])])

# Check with a version number higher than any version released so that the
# check will fail.  Since we provide a 2nd argument to BOOST_REQUIRE, it means
# that Boost is optional and that we can continue without it.
AT_CHECK_MACRO([BOOST_REQUIRE 9.9.9 (optional dep)], [core],
               [BOOST_REQUIRE([9.9.9], [echo OMG Boost 9.9.9 not released])
                BOOST_FOREACH
                BOOST_SYSTEM])

AT_CHECK_MACRO([BOOST_REQUIRE $var 0.0], [core],
               [var=0.0; BOOST_REQUIRE([$var])])
AT_CHECK_MACRO_CROSS([BOOST_REQUIRE $var 1.0], [core],
                     [var=1.0; BOOST_REQUIRE([$var])])
AT_CHECK_MACRO([BOOST_REQUIRE $var 1.1.1], [core],
               [var=1.1.1; BOOST_REQUIRE([$var])])

AT_BANNER([Boost libraries])

AT_CHECK_MACRO([BOOST_CONTEXT], [lib])
AT_CHECK_MACRO([BOOST_COROUTINE], [lib])
AT_CHECK_MACRO([BOOST_DATE_TIME], [lib])
AT_CHECK_MACRO([BOOST_GRAPH], [lib])
AT_CHECK_MACRO([BOOST_IOSTREAMS (static)], [lib], [BOOST_IOSTREAMS([s])])
AT_CHECK_MACRO([BOOST_IOSTREAMS], [lib])
AT_CHECK_MACRO([BOOST_LOCALE], [lib])
AT_CHECK_MACRO([BOOST_LOG], [lib])
AT_CHECK_MACRO([BOOST_LOG_SETUP], [lib])
AT_CHECK_MACRO([BOOST_PROGRAM_OPTIONS], [lib])
AT_CHECK_MACRO([BOOST_PYTHON (static)], [lib], [BOOST_PYTHON([s])])
AT_CHECK_MACRO([BOOST_PYTHON], [lib])
AT_CHECK_MACRO([BOOST_REGEX], [lib])
AT_CHECK_MACRO([BOOST_SERIALIZATION], [lib])
AT_CHECK_MACRO([BOOST_SIGNALS], [lib])
AT_CHECK_MACRO([BOOST_SYSTEM], [lib])
AT_CHECK_MACRO([BOOST_TEST (static)], [lib], [BOOST_TEST([s])])
AT_CHECK_MACRO([BOOST_TEST], [lib])
AT_CHECK_MACRO([BOOST_THREAD], [lib])
AT_CHECK_MACRO([BOOST_WAVE], [lib])
AT_CHECK_MACRO_CROSS([BOOST_FILESYSTEM], [lib])

AT_BANNER([Boost header-only libraries])

AT_CHECK_MACRO([BOOST_ARRAY], [header])
AT_CHECK_MACRO([BOOST_ASSIGN], [header])
AT_CHECK_MACRO([BOOST_BIND], [header])
AT_CHECK_MACRO([BOOST_CONVERSION], [header])
AT_CHECK_MACRO([BOOST_FLYWEIGHT], [header])
AT_CHECK_MACRO([BOOST_FOREACH], [header])
AT_CHECK_MACRO([BOOST_FORMAT], [header])
AT_CHECK_MACRO([BOOST_FUNCTION], [header])
AT_CHECK_MACRO([BOOST_HASH], [header])
AT_CHECK_MACRO([BOOST_LAMBDA], [header])
AT_CHECK_MACRO([BOOST_MATH], [header])
AT_CHECK_MACRO([BOOST_MULTIARRAY], [header])
AT_CHECK_MACRO([BOOST_NUMERIC_CONVERSION], [header])
AT_CHECK_MACRO([BOOST_OPTIONAL], [header])
AT_CHECK_MACRO([BOOST_PREPROCESSOR], [header])
AT_CHECK_MACRO([BOOST_REF], [header])
AT_CHECK_MACRO([BOOST_SCOPE_EXIT], [header])
AT_CHECK_MACRO([BOOST_SMART_PTR], [header])
AT_CHECK_MACRO([BOOST_STATICASSERT], [header])
AT_CHECK_MACRO([BOOST_STRING_ALGO], [header])
AT_CHECK_MACRO([BOOST_TOKENIZER], [header])
AT_CHECK_MACRO([BOOST_TRIBOOL], [header])
AT_CHECK_MACRO([BOOST_TUPLE], [header])
AT_CHECK_MACRO([BOOST_TYPETRAITS], [header])
AT_CHECK_MACRO([BOOST_UTILITY], [header])
AT_CHECK_MACRO([BOOST_VARIANT], [header])
AT_CHECK_MACRO([BOOST_XPRESSIVE], [header])
